// src/App.js:

import {
  Box,
  Container,
  createTheme,
  CssBaseline,
  ThemeProvider,
  Typography,
} from '@mui/material';
import React from 'react';
import GuestList from './components/GuestList';

// Theme creation through Material-UI Library's function
const theme = createTheme({
  palette: {
    mode: 'light',
  },
});

function App() {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Container sx={{ padding: '40px' }}>
        <Box sx={{ textAlign: 'center', mb: 4 }}>
          <Typography variant="h4" component="h1" gutterBottom>
            Guest List App
          </Typography>
        </Box>
        <main>
          <GuestList />
        </main>
      </Container>
    </ThemeProvider>
  );
}

export default App;

----------------------------------------

// src/api.js:

const baseUrl = 'https://9rbjs-4000.csb.app';

export const getGuests = async () => {
  try {
    const response = await fetch(`${baseUrl}/guests`);
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const allGuests = await response.json();
    return allGuests;
  } catch (error) {
    console.error('Error fetching guests:', error);
    throw error;
  }
};

export const getGuestById = async (id) => {
  try {
    const response = await fetch(`${baseUrl}/guests/${id}`);
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const guest = await response.json();
    return guest;
  } catch (error) {
    console.error(`Error fetching guest with ID ${id}:`, error);
    throw error;
  }
};

export const addGuest = async (guest) => {
  try {
    const response = await fetch(`${baseUrl}/guests`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(guest),
    });
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const createdGuest = await response.json();
    return createdGuest;
  } catch (error) {
    console.error('Error adding guest:', error);
    throw error;
  }
};

export const removeGuest = async (id) => {
  try {
    const response = await fetch(`${baseUrl}/guests/${id}`, {
      method: 'DELETE',
    });
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const deletedGuest = await response.json();
    return deletedGuest;
  } catch (error) {
    console.error('Error removing guest:', error);
    throw error;
  }
};

export const toggleAttending = async (id, attending) => {
  try {
    const response = await fetch(`${baseUrl}/guests/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ attending }),
    });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    const updatedGuest = await response.json();
    return updatedGuest;
  } catch (error) {
    console.error('Error updating guest:', error);
    throw error;
  }
};

----------------------------------------

// src/components/GuestForm.js:

import { Box, Button, TextField } from '@mui/material';
import React, { useState } from 'react';

const GuestForm = ({ addGuest, disabled }) => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');

  const handleSubmit = (event) => {
    event.preventDefault();
    if (!disabled) {
      addGuest({ firstName, lastName });
      setFirstName('');
      setLastName('');
    }
  };

  const handleKeyDown = (event) => {
    if (event.key === 'Enter') {
      handleSubmit(event);
    }
  };

  return (
    <Box component="form" onSubmit={handleSubmit} sx={{ mb: 2 }}>
      <TextField
        id="first-name"
        label="First name"
        value={firstName}
        onChange={(event) => setFirstName(event.target.value)}
        placeholder="First name"
        required
        fullWidth
        disabled={disabled}
        sx={{ mb: 2 }}
      />
      <TextField
        id="last-name"
        label="Last name"
        value={lastName}
        onChange={(event) => setLastName(event.target.value)}
        placeholder="Last name"
        required
        fullWidth
        onKeyDown={handleKeyDown}
        disabled={disabled}
        sx={{ mb: 2 }}
      />
      <Box sx={{ display: 'flex', justifyContent: 'center' }}>
        <Button variant="contained" type="submit" disabled={disabled}>
          Add Guest
        </Button>
      </Box>
    </Box>
  );
};

export default GuestForm;

----------------------------------------

// src/components/GuestItem.js:

import {
  Box,
  Button,
  Checkbox,
  ListItem,
  ListItemText,
  Typography,
} from '@mui/material';
import React from 'react';

const GuestItem = ({ guest, removeGuest, toggleAttending }) => (
  <div data-test-id="guest">
    <Box sx={{ mb: 1, display: 'flex', alignItems: 'center' }}>
      <ListItem sx={{ flex: 1, display: 'flex', alignItems: 'center' }}>
        <ListItemText
          primary={
            <Typography variant="h6">
              {guest.firstName} {guest.lastName}
            </Typography>
          }
        />
        <Typography
          variant="subtitle1"
          sx={{ mr: 2, color: guest.attending ? 'green' : 'red' }}
        >
          Attending: {guest.attending ? 'Yes' : 'No'}
        </Typography>
        <Checkbox
          checked={guest.attending}
          onChange={() => toggleAttending(guest.id)}
          aria-label={`${guest.firstName} ${guest.lastName} attending`}
          sx={{ mr: 2 }}
        />
        <Button
          variant="contained"
          color="secondary"
          onClick={() => removeGuest(guest.id)}
          sx={{
            backgroundColor: '#E44D2E',
            '&:hover': { backgroundColor: '#D43A1A' },
          }}
        >
          Remove
        </Button>
      </ListItem>
    </Box>
  </div>
);

export default GuestItem;

----------------------------------------

// src/components/GuestList.js:

import React, { useState, useEffect } from 'react';
import { getGuests, addGuest, removeGuest, toggleAttending } from '../api';
import GuestForm from './GuestForm';
import GuestItem from './GuestItem';
import { Box, Typography } from '@mui/material';

const GuestList = () => {
  const [guests, setGuests] = useState([]); // Hold the list of guests
  const [loading, setLoading] = useState(true); // Load state

  useEffect(() => {
    const fetchGuests = async () => {
      try {
        const guestsData = await getGuests();
        if (Array.isArray(guestsData)) {
          setGuests(guestsData); // Update state with the fetched guests
        } else {
          console.error('Error: the response is not an array:', guestsData);
          setGuests([]);
        }
      } catch (error) {
        console.error('Error loading guests:', error);
        setGuests([]);
      } finally {
        setLoading(false); // Finishes load
      }
    };

    fetchGuests().catch((error) =>
      console.error('Error fetching guests:', error),
    );
  }, []);

  const handleAddGuest = async (guest) => {
    try {
      const createdGuest = await addGuest(guest);
      setGuests([...guests, createdGuest]); // Update state with the new guest
    } catch (error) {
      console.error('Error adding guest:', error);
    }
  };

  const handleRemoveGuest = async (id) => {
    try {
      await removeGuest(id);
      setGuests(guests.filter((guest) => guest.id !== id)); // Update state to remove the guest
    } catch (error) {
      console.error('Error removing guest:', error);
    }
  };

  const handleToggleAttending = async (id) => {
    const guest = guests.find((g) => g.id === id);
    try {
      const updatedGuest = await toggleAttending(id, !guest.attending);
      setGuests(guests.map((g) => (g.id === id ? updatedGuest : g))); // Update state with the updated guest
    } catch (error) {
      console.error('Error updating guest:', error);
    }
  };

  return (
    <div>
      {loading ? (
        <Box
          sx={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            // height: '100vh',
          }}
        >
          <Typography variant="h4" component="p">
            Loading...
          </Typography>
        </Box>
      ) : (
        <>
          <GuestForm addGuest={handleAddGuest} disabled={loading} />
          <div>
            {guests.length > 0 ? (
              guests.map((guest) => (
                <GuestItem
                  key={`guest-${guest.id}`}
                  guest={guest}
                  removeGuest={handleRemoveGuest}
                  toggleAttending={handleToggleAttending}
                />
              ))
            ) : (
              <p>No guests available</p>
            )}
          </div>
        </>
      )}
    </div>
  );
};

export default GuestList;

----------------------------------------

